name: Release CS2 Plugin

# Cambiamos el trigger de 'workflow_dispatch' a 'push', filtrando por cambios en '**/core.lua'
on:
  push:
    paths:
      - '**/core.lua'

# Definimos variables de entorno globales
env:
  SOURCE_DIR: ./src
  INSTALL_PATH: /game/csgo/addons/swiftly/

jobs:
  generate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Necesario para crear releases

    steps:
      # Checkout del c√≥digo con historial completo para manejar tags
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      # Establecemos PLUGIN_NAME din√°micamente desde el nombre del repositorio
      - name: Set PLUGIN_NAME
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          if [[ $REPO_NAME == sw-* ]]; then
            PLUGIN_NAME=${REPO_NAME#sw-}
          else
            PLUGIN_NAME=$REPO_NAME
          fi
          echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_ENV

      # Extraemos la versi√≥n de core.lua y decidimos si crear un release
      - name: Check version and set variables
        run: |
          # Extraemos la versi√≥n del return en GetPluginVersion(), quitando el 'v'
          NEW_VERSION=$(grep 'return "v[0-9]\+\.[0-9]\+\.[0-9]\+"' **/core.lua | sed 's/.*"v\([0-9]\+\.[0-9]\+\.[0-9]\+\)".*/\1/')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Obtenemos el √∫ltimo tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

          # Extraemos la versi√≥n del √∫ltimo tag, sin 'v'
          if [ -n "$LATEST_TAG" ]; then
            LATEST_VERSION=${LATEST_TAG#v}
          else
            LATEST_VERSION=""
          fi

          # Decidimos si crear el release: si no hay tag previo o si la versi√≥n cambi√≥
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" != "$NEW_VERSION" ]; then
            echo "CREATE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
          fi

      # Creamos el archivo ZIP solo si se va a crear un release
      - name: Create ZIP file
        if: env.CREATE_RELEASE == 'true'
        run: |
          cd ${{ env.SOURCE_DIR }}
          zip -r ../${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip .

      # Obtenemos los mensajes de commit desde el √∫ltimo release
      - name: Get recent commit messages since last release
        if: env.CREATE_RELEASE == 'true'
        run: |
          if [ -n "$LATEST_TAG" ]; then
            COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --oneline | sed 's/^/- /')
          else
            COMMIT_MESSAGES="- Initial Release"
          fi
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Creamos el release solo si la versi√≥n cambi√≥ o es el primero
      - name: Release
        if: env.CREATE_RELEASE == 'true'
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: v${{ env.NEW_VERSION }}
          body: |
            **Changes:**
            ${{ env.COMMIT_MESSAGES }}

            **How to download ‚¨áÔ∏è**
            Click the file below named <code>${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip</code> in the assets section to start the download automatically.

            **How to install üì¶**
            Extract the compressed file and place the folder(s) in `${{ env.INSTALL_PATH }}`

            **Support me ‚ù§Ô∏è**
            Please consider leaving a ‚≠ê if it's helpful to your server.
          draft: false
          prerelease: false
          files: |
            ./${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip