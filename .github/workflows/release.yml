name: Release CS2 Plugin

on:
  push:
    paths:
      - '**/core.lua'

env:
  SOURCE_DIR: ./src
  INSTALL_PATH: /game/csgo/addons/swiftly/

jobs:
  generate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set PLUGIN_NAME
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          if [[ $REPO_NAME == sw-* ]]; then
            PLUGIN_NAME=${REPO_NAME#sw-}
          else
            PLUGIN_NAME=$REPO_NAME
          fi
          echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_ENV

      - name: Check version and set variables
        run: |
          # Buscamos core.lua recursivamente desde la ra√≠z
          CORE_FILE=$(find . -type f -name "core.lua" | head -n 1)
          
          # Si no se encuentra core.lua, no creamos release
          if [ -z "$CORE_FILE" ]; then
            echo "Warning: No se encontr√≥ core.lua en el repositorio, no se crear√° release"
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Verificamos si el diff afecta GetPluginVersion()
          CHANGED_IN_FUNCTION=$(git diff HEAD^ HEAD "$CORE_FILE" | grep -A 10 'function GetPluginVersion()' | grep -E '^\+.*return "[^"]*"')
          
          if [ -z "$CHANGED_IN_FUNCTION" ]; then
            echo "Warning: No se detectaron cambios en GetPluginVersion() en $CORE_FILE, no se crear√° release"
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extraemos la versi√≥n de GetPluginVersion()
          NEW_VERSION=$(grep -A 10 'function GetPluginVersion()' "$CORE_FILE" | grep 'return "[^"]*"' | sed 's/.*return "\([^"]*\)".*/\1/' | head -n 1)
          
          # Si no se encuentra una versi√≥n v√°lida, no creamos release
          if [ -z "$NEW_VERSION" ]; then
            echo "Warning: No se encontr√≥ una versi√≥n v√°lida en GetPluginVersion() en $CORE_FILE, no se crear√° release"
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi

          # Obtenemos todos los releases y si la versi√≥n ya existe, no creamos release
          RELEASES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | .tag_name')
          if echo "$RELEASES" | grep -q "^$NEW_VERSION$"; then
            echo "Warning: La versi√≥n $NEW_VERSION ya existe, no se crear√° release"
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Limpiamos la versi√≥n para nombres de archivos (sin espacios, caracteres especiales limitados)
          VERSION=$(echo "$NEW_VERSION" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Normalizamos para el tag a√±adiendo 'v' si no la tiene
          if [[ "$NEW_VERSION" =~ ^v ]]; then
            TAG_VERSION="$NEW_VERSION"
          else
            TAG_VERSION="v$NEW_VERSION"
          fi
          # Limpiamos el tag para que sea v√°lido en GitHub
          TAG_VERSION=$(echo "$TAG_VERSION" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          
          # Obtenemos el √∫ltimo tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
          # Extraemos la versi√≥n del √∫ltimo tag, sin 'v' para comparaci√≥n
          if [ -n "$LATEST_TAG" ]; then
            LATEST_VERSION=${LATEST_TAG#v}
          else
            LATEST_VERSION=""
          fi
          
          # Decidimos si crear el release comparando la versi√≥n sin 'v'
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" != "$VERSION" ]; then
            echo "CREATE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create ZIP file
        if: env.CREATE_RELEASE == 'true'
        run: |
          cd ${{ env.SOURCE_DIR }}
          zip -r ../${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip .

      - name: Get recent commit messages since last release
        if: env.CREATE_RELEASE == 'true'
        run: |
          if [ -n "$LATEST_TAG" ]; then
            COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --oneline | sed 's/^/- /')
          else
            COMMIT_MESSAGES="- Initial Release"
          fi
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Release
        if: env.CREATE_RELEASE == 'true'
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ${{ env.TAG_VERSION }}
          name: ${{ env.TAG_VERSION }}
          body: |
            **Changes:**
            ${{ env.COMMIT_MESSAGES }}

            **How to download ‚¨áÔ∏è**
            Click the file below named <code>${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip</code> in the assets section to start the download automatically.

            **How to install üì¶**
            Extract the compressed file and place the folder(s) in `${{ env.INSTALL_PATH }}`

            **Support me ‚ù§Ô∏è**
            Please consider leaving a ‚≠ê if it's helpful to your server.
          draft: false
          prerelease: false
          files: |
            ./${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip